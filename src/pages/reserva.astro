---
import type { PropertyList } from '@interfaces/properties.interfaces';
import type { ReservationList } from '@interfaces/reservation.interfaces';
import Layout from 'src/layouts/Layout.astro';

let properties: PropertyList[] = [];
let reservation: ReservationList[] = [];
const token = Astro.cookies.get('token')?.value ?? '';

const url = process.env.API_GET_PROPERTIES ?? '';
const url2 = process.env.API_GET_RESERVATION ?? '';

try {
  const response = await fetch(url, {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' },
  });
  properties = await response.json();
} catch (error) {
  console.error('Error fetching properties:', error);
}

try {
  const responseReservation = await fetch(url2, {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' },
  });
  reservation = await responseReservation.json();
} catch (error) {
  console.error('Error fetching properties:', error);
}

const title = 'Reservas | Home';
---

<Layout title={title}>
  <h1 class="text-3xl text-center">Listado de Reservas</h1>

  <div
    id="reservation-container"
    class="flex flex-wrap -mx-4"
    data-properties={JSON.stringify(properties)}
  >
    {
      properties.map(
        (property) =>
          property.status === 'reservado' && (
            <div class="w-full md:w-1/2 lg:w-1/3 px-4 mb-8 mt-8">
              <div class="bg-white rounded-lg shadow-md p-6 flex flex-col justify-between h-full">
                <div>
                  <h2 class="text-xl font-bold mb-2">{property.name}</h2>
                  <p
                    class="text-gray-700 mb-4 line-clamp-3"
                    style="overflow-wrap: break-word;"
                  >
                    {property.description}
                  </p>
                  <p class="text-gray-700 mb-2">
                    Capacidad: {property.capacity}
                  </p>
                  <p class="text-gray-700">Estado: {property.status}</p>
                </div>
                <div class="mt-4">
                  {property.fotos.map((foto) => (
                    <img
                      src={foto.url}
                      alt={foto.description}
                      class="w-full h-48 object-cover mb-2 rounded-md"
                      style="height: 200px; width: 100%; object-fit: cover;"
                    />
                  ))}
                </div>
                {reservation
                  .filter((reserva) => reserva.property.id === property.id)
                  .map((reserva) => (
                    <div>Reserva id: {reserva.id}</div>
                    <button
                  type="button"
                  data-reserva={reserva.id}
                  data-token={token}
                  class="w-full py-2 px-4 bg-indigo-600 text-white font-semibold rounded-md shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 mt-4"
                >
                  Borrar reserva
                </button>
                  ))
                }
                
              </div>
            </div>
          ),
      )
    }
  </div>
</Layout>

<script>
  import { actions } from 'astro:actions';

  const dataDiv = document.querySelector('#reservation-container');

  dataDiv?.addEventListener('click', async (e) => {
    const target = e.target as HTMLElement;
    if (target.tagName === 'BUTTON' && target.dataset.reserva) {
      const reservationId = target.dataset.reserva;
      const propertyToken = target.dataset.token;

      target.setAttribute('disabled', 'disabled');

      const { error } = await actions.deleteReservation({
        reservaId: reservationId,
        token: propertyToken,
      });

      if (error) {
        console.log(error);
        dataDiv.removeAttribute('disabled');
      }

      window.location.href = '/reserva';

      setTimeout(() => {
        target.removeAttribute('disabled');
      }, 2000);
    }
  });
</script>
